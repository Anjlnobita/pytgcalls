# This is the workflow to make and push wheels to PyPi

name: Build Wheels
on:
  push:
    branches: [ master, dev, ntgcalls ]
    paths-ignore:
      - '.gitignore'
      - '.npmignore'
      - '.pre-commit-config.yaml'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'README.md'
      - 'install_nodejs.sh'
      - 'example/*'
      - '.github/*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: "native"
            shared_name: "linux-x86_64"
            cibw_os_build: "manylinux_"
          #- os: ubuntu-latest
          #  cibw_archs: "aarch64"
          #  shared_name: "linux-arm64"
          #  cibw_os_build: "manylinux_"
          - os: windows-latest
            cibw_archs: "native"
            shared_name: "windows-x86_64"
          - os: macos-13
            cibw_archs: "arm64"
            cibw_os_build: "macosx_arm64"
            shared_name: "macos-arm64"
      fail-fast: false

    steps:
      - name: Get Branch Name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: github_info

      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.github_info.outputs.branch }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.15.0
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7"
          CIBW_BUILD: cp3*-${{ matrix.cibw_os_build }}*
          CIBW_SKIP: cp36-* 
          CIBW_BUILD_VERBOSITY: 3
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_TEST_COMMAND: python -c "import pytgcalls; print(pytgcalls.__version__)"

      - uses: actions/upload-artifact@v3
        with:
          name: pytgcalls-${{ matrix.shared_name }}-wheels
          path: ./wheelhouse/*.whl
          if-no-files-found: error
            

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: tmp/

      - name: Extract artifacts
        run: |
          mkdir dist
          find tmp -type f -name "*.whl" | xargs -I {} mv {} dist

      - name: Publish a Python distribution to PyPI.
        if: github.ref == 'refs/heads/master' && github.repository == 'pytgcalls/ntgcalls'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: dist/